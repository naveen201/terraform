 ls
data.tf  main.tf  provider.tf  security.tf  variables.tf
[ec2-user@terraform-serevr ansible]$ cat provider.tf 
terraform {
  required_version = "~> 1.0"
  required_providers {
    aws = {
      source  = "hashicorp/aws"
      version = "~> 5.0"
    }
  }
}

provider "aws" {
  region = "ap-south-1"
}

terraform {
  backend "s3" {
    bucket = "project-register-my"
    key    = "Ansible/terraform.tfstate"
    region = "ap-south-1"
  }
}


resource "aws_dynamodb_table" "tf_lock" {
  name           = "terraform-lock2"
  read_capacity  = 3
  write_capacity = 3
  hash_key       = "LockID"
  attribute {
    name = "LockID"
    type = "S"
  }
  tags = {
    Name = "terraform lock table " #to destroty, add flag --lock=false
  }
  lifecycle {
    create_before_destroy = true #to destroy , change to false
  }
}

[ec2-user@terraform-serevr ansible]$ cat main.tf 
resource "aws_instance" "AnsibleServer" {
  ami                    = data.aws_ami.amazonlinux2.id
  instance_type          = var.my_instance_type
  key_name               = var.my_key
  vpc_security_group_ids = [aws_security_group.web-traffic.id]

  tags = {
    "Name" = "AnsibleServer"
  }
}
[ec2-user@terraform-serevr ansible]$ cat security.tf 
#self
resource "aws_security_group" "web-traffic" {
  name = "My_Security_Group2"


  dynamic "ingress" {
    iterator = port
    for_each = var.ingressrules
    content {
      from_port   = port.value
      to_port     = port.value
      protocol    = "tcp"
      cidr_blocks = ["0.0.0.0/0"]
    }
  }

  dynamic "egress" {
    iterator = port
    for_each = var.egressrules
    content {
      from_port   = port.value
      to_port     = port.value
      protocol    = "tcp"
      cidr_blocks = ["0.0.0.0/0"]
    }
  }

  tags = {
    Name = "MY_SG2"
  }
}
[ec2-user@terraform-serevr ansible]$ cta variables.tf 
-bash: cta: command not found
[ec2-user@terraform-serevr ansible]$ cat  variables.tf 
variable "region" {
  type    = string
  default = "ap-south-1"
}
variable "my_instance_type" {
  type    = string
  default = "t2.micro"
}


variable "my_key" {
  description = "AWS EC2 Key pair that needs to be associated with EC2 Instance"
  type        = string
  default     = "Terraform"
}

variable "ingressrules" {
  type    = list(number)
  default = [22, 80, 443, 8080, 8090, 9000, 8081, 2479]
}

variable "egressrules" {
  type    = list(number)
  default = [25, 80, 443, 8080, 8090, 3306, 53]
}
[ec2-user@terraform-serevr ansible]$ cat data.tf 
data "aws_ami" "amazonlinux2" {
  most_recent = true

  filter {
    name   = "owner-alias"
    values = ["amazon"]
  }

  filter {
    name   = "name"
    values = ["amzn2-ami-hvm-*-x86_64-ebs"]
  }
}
[ec2-user@terraform-serevr ansible]$ 
